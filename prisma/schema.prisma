// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id           String      @id @default(cuid())
  name         String // 상품 이름
  description  String? // 상품 설명
  price        Decimal // 단가 (원 단위, VAT 포함)
  imageUrl     String?
  currency     String      @default("KRW") // 통화 단위 (기본: KRW)
  stock        Int? // 재고 수량 (재고 관리 안 하면 생략 가능)
  type         ProductType
  isActive     Boolean     @default(true) // 판매 중지 여부
  isRefundable Boolean     @default(true) // 환불 가능 여부
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  orderItems OrderItem[]
}

model Order {
  id             String      @id @default(cuid())
  userId         String // 주문자
  totalAmount    Decimal // 주문 전체 금액 (정상가 * 수량 합)
  status         OrderStatus // PENDING, PAID, CANCELED, PARTIALLY_CANCELED 등
  paidAmount     Decimal? // 실제 결제된 금액 (쿠폰, 포인트, 부분결제 반영)
  refundedAmount Decimal? // 환불된 총 금액 (부분 환불 고려)
  paymentId      String? // 결제 ID
  paidAt         DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  orderItems OrderItem[]
  payment    Payment?    @relation(fields: [paymentId], references: [id])
  refunds    Refund[]
}

model OrderItem {
  id          String   @id @default(cuid())
  productId   String
  orderId     String
  quantity    Int
  canceledQty Int      @default(0) // 부분 취소된 수량
  unitPrice   Decimal // 주문 당시 단가
  productName String // 주문 당시 상품명 (캐시)
  optionName  String? // ex: "색상: 블랙 / 사이즈: L"
  createdAt   DateTime @default(now())

  // payment      Payment?  @relation(fields: [paymentId], references: [id])
  product Product  @relation(fields: [productId], references: [id])
  order   Order    @relation(fields: [orderId], references: [id])
  refunds Refund[]
}

model Payment {
  id                 String         @id @default(cuid())
  amount             Decimal
  pgProvider         PgProviderType
  method             PaymentMethod // CARD, BANK_TRANSFER, etc.
  serviceName        String
  status             PaymentStatus // INITIATED, SUCCESS, FAILED
  onlineUrl          String? // 결제 웹 URL
  mobileUrl          String? // 결제 모바일 URL
  paidAt             DateTime?
  successRedirectUrl String // 결제 성공 시 리다이렉트 URL
  failureRedirectUrl String // 결제 실패 시 리다이렉트 URL
  cancelRedirectUrl  String // 결제 취소 시 리다이렉트 URL
  createdAt          DateTime       @default(now())

  orders  Order[]
  refunds Refund[]

  payletterDetail PayletterDetail?
}

model PayletterDetail {
  id                    String   @id @default(cuid())
  paymentId             String   @unique
  userId                String?
  userName              String?
  code                  String? // 결과
  message               String? // 메시지
  tid                   String?  @unique // PG 고유 결제번호
  cid                   String? // PG 승인번호
  orderNo               String? // PG 가맹점 주문 번호
  pgcode                String // PG 코드
  serviceName           String? // 결제 서비스명 (예: 타임리 GPT)
  productName           String? // PG 결제 시 사용된 상품 이름
  payhash               String? // 파라메터 검증을 위한 sha256 hash 값 Sha256(user_id +amount + tid +결제용 API Key) * 일부 결제 수단은 전달되지 않습니다.(가상계좌 등)
  payInfo               String? // 결제 부가 정보
  methodInfo            String? // 복합결제 (예: 신용카드+(충전)포인트) 시 메인 결제 수단 (적용결제 수단: 네이버페이, 카카오페이, SSG페이, 페이코, 토스(예정))
  domesticFlag          String? // 국내 / 해외 신용카드 구분 (Y : 해외, N : 국내)
  billkey               String? // 자동결제 재결제용 키
  cardInfo              String? // 마스킹(중간6자리) 카드번호 (일반결제(신용카드, 페이코) / 자동결제(신용카드, 페이코) 에만 전달)
  disposableCupDeposit  Decimal? // 결제요청한 일회용 컵 보증금
  amount                Decimal? // 결제 금액
  taxAmount             Decimal? // 부가세 금액(세팅하지 않는 경우 (결제금액 - 비과세 금액)/11 : 소수점이하 반올림으로 자동 계산)
  taxfreeAmount         Decimal? // 비과세 금액
  nonsettleAmount       Decimal? // 미정산 금액
  couponAmount          Decimal? // 쿠폰 금액 (페이코만 적용)
  receiptPossibleAmount Decimal? // 현금영수증 가능 금액
  installMonth          Int?
  // customParameter       Json
  // 현금 영수증
  cashReceiptCid        String? // 현금영수증 - 승인번호
  cashReceiptCode       String? // 현금영수증 - 결과
  cashReceiptDealNo     String? // 현금영수증 - 발급시 주문번호
  cashReceiptIssueType  String? // 현금영수증 - 발행 구분
  cashReceiptMessage    String? // 현금영수증 - 메시지
  cashReceiptPayerSid   String? // 현금영수증 - 신분확인 번호
  cashReceiptType       String? // 현금영수증 - 거래자 구분
  // 가상 계좌
  accountNo             String? // 가상계좌 - 번호
  accountName           String? // 가상계좌 - 입금자명
  accountHolder         String? // 가상계좌 - 예금주명
  bankCode              String? // 가상계좌 - 은행 코드
  bankName              String? // 가상계좌 - 은행명
  issueTid              String? // 가상계좌 - 채번 승인번호
  expireDate            String? // 가상계좌 - 입금만료일 (ex: 20210808)
  expireTime            String? // 가상계좌 - 만료시각 (ex: 1130)

  transactionDate DateTime? // 결제 완료 시각

  payment Payment @relation(fields: [paymentId], references: [id])
}

model Refund {
  id          String    @id @default(uuid())
  paymentId   String
  orderId     String? // 전체 주문 환불 시 사용
  orderItemId String?
  reason      String?
  amount      Decimal
  quantity    Int?
  refundedAt  DateTime?

  payment   Payment    @relation(fields: [paymentId], references: [id])
  orderItem OrderItem? @relation(fields: [orderItemId], references: [id])
  order     Order?     @relation(fields: [orderId], references: [id])
}

enum OrderStatus {
  PENDING
  PAID
  PARTIALLY_CANCELED
  CANCELED
  FAILED
}

enum PgProviderType {
  PAYLETTER
}

enum PaymentStatus {
  INITIATED
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}

enum PaymentMethod {
  CARD
  BANK_TRANSFER
  VIRTUAL_ACCOUNT
  MOBILE
  POINT
  VOUCHER
  BOOK
  CULTURE
  SMART_CULTURE
  HAPPY_MONEY
  MOBILE_POP
  TEEN_CASH
  T_MONEY
  CVS
  EGG_MONEY
  ON_CASH
  PHONE_BILL
  CASH_BEE
  KAKAO_PAY
  PAYCO
  CHECK_PAY
  TOSS
  SSG_PAY
  NAVER_PAY
  SAMSUNG_PAY
  APPLE_PAY
  OTHER
}

/// 상품 유형 (ProductType)
enum ProductType {
  CREDIT
  // DIGITAL // 디지털 상품 (예: 캐시, 쿠폰, 포인트 등 즉시 지급)
  // PHYSICAL // 실물 상품 (배송 필요, 예: 굿즈, 책 등)
  // SUBSCRIPTION // 구독 상품 (예: 월간 이용권, 멤버십 등)
  // LICENSE // 라이선스 상품 (예: 소프트웨어 키, API 키 등)
  // SERVICE // 서비스형 상품 (예: 전문가 연결, 온라인 교육 등)
  // EVENT // 이벤트성 상품 (예: 추첨권, 기프티콘 등)
  // VIRTUAL // 가상자산 상품 (예: NFT, 디지털 소유권 등)
}
