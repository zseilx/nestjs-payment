
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  imageUrl: 'imageUrl',
  currency: 'currency',
  stock: 'stock',
  type: 'type',
  isActive: 'isActive',
  isRefundable: 'isRefundable',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  totalAmount: 'totalAmount',
  status: 'status',
  paidAmount: 'paidAmount',
  refundedAmount: 'refundedAmount',
  paymentId: 'paymentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  orderId: 'orderId',
  quantity: 'quantity',
  canceledQty: 'canceledQty',
  unitPrice: 'unitPrice',
  productName: 'productName',
  optionName: 'optionName',
  createdAt: 'createdAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  pgProvider: 'pgProvider',
  method: 'method',
  serviceName: 'serviceName',
  status: 'status',
  paidAt: 'paidAt',
  successRedirectUrl: 'successRedirectUrl',
  failureRedirectUrl: 'failureRedirectUrl',
  cancelRedirectUrl: 'cancelRedirectUrl',
  createdAt: 'createdAt'
};

exports.Prisma.PayletterDetailScalarFieldEnum = {
  id: 'id',
  paymentId: 'paymentId',
  userId: 'userId',
  userName: 'userName',
  onlineUrl: 'onlineUrl',
  mobileUrl: 'mobileUrl',
  code: 'code',
  message: 'message',
  tid: 'tid',
  cid: 'cid',
  orderNo: 'orderNo',
  pgcode: 'pgcode',
  serviceName: 'serviceName',
  productName: 'productName',
  payhash: 'payhash',
  payInfo: 'payInfo',
  methodInfo: 'methodInfo',
  domesticFlag: 'domesticFlag',
  billkey: 'billkey',
  cardInfo: 'cardInfo',
  disposableCupDeposit: 'disposableCupDeposit',
  amount: 'amount',
  taxAmount: 'taxAmount',
  taxfreeAmount: 'taxfreeAmount',
  nonsettleAmount: 'nonsettleAmount',
  couponAmount: 'couponAmount',
  receiptPossibleAmount: 'receiptPossibleAmount',
  installMonth: 'installMonth',
  cashReceiptCid: 'cashReceiptCid',
  cashReceiptCode: 'cashReceiptCode',
  cashReceiptDealNo: 'cashReceiptDealNo',
  cashReceiptIssueType: 'cashReceiptIssueType',
  cashReceiptMessage: 'cashReceiptMessage',
  cashReceiptPayerSid: 'cashReceiptPayerSid',
  cashReceiptType: 'cashReceiptType',
  accountNo: 'accountNo',
  accountName: 'accountName',
  accountHolder: 'accountHolder',
  bankCode: 'bankCode',
  bankName: 'bankName',
  issueTid: 'issueTid',
  expireDate: 'expireDate',
  expireTime: 'expireTime',
  transactionDate: 'transactionDate'
};

exports.Prisma.RefundScalarFieldEnum = {
  id: 'id',
  paymentId: 'paymentId',
  orderId: 'orderId',
  orderItemId: 'orderItemId',
  reason: 'reason',
  amount: 'amount',
  quantity: 'quantity',
  refundedAt: 'refundedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.ProductType = exports.$Enums.ProductType = {
  CREDIT: 'CREDIT'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  PENDING: 'PENDING',
  PAID: 'PAID',
  PARTIALLY_CANCELED: 'PARTIALLY_CANCELED',
  CANCELED: 'CANCELED',
  FAILED: 'FAILED'
};

exports.PgProviderType = exports.$Enums.PgProviderType = {
  PAYLETTER: 'PAYLETTER'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CARD: 'CARD',
  BANK_TRANSFER: 'BANK_TRANSFER',
  VIRTUAL_ACCOUNT: 'VIRTUAL_ACCOUNT',
  MOBILE: 'MOBILE',
  POINT: 'POINT',
  VOUCHER: 'VOUCHER',
  BOOK: 'BOOK',
  CULTURE: 'CULTURE',
  SMART_CULTURE: 'SMART_CULTURE',
  HAPPY_MONEY: 'HAPPY_MONEY',
  MOBILE_POP: 'MOBILE_POP',
  TEEN_CASH: 'TEEN_CASH',
  T_MONEY: 'T_MONEY',
  CVS: 'CVS',
  EGG_MONEY: 'EGG_MONEY',
  ON_CASH: 'ON_CASH',
  PHONE_BILL: 'PHONE_BILL',
  CASH_BEE: 'CASH_BEE',
  KAKAO_PAY: 'KAKAO_PAY',
  PAYCO: 'PAYCO',
  CHECK_PAY: 'CHECK_PAY',
  TOSS: 'TOSS',
  SSG_PAY: 'SSG_PAY',
  NAVER_PAY: 'NAVER_PAY',
  SAMSUNG_PAY: 'SAMSUNG_PAY',
  APPLE_PAY: 'APPLE_PAY',
  OTHER: 'OTHER'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  INITIATED: 'INITIATED',
  SUCCESS: 'SUCCESS',
  FAILED: 'FAILED'
};

exports.Prisma.ModelName = {
  Product: 'Product',
  Order: 'Order',
  OrderItem: 'OrderItem',
  Payment: 'Payment',
  PayletterDetail: 'PayletterDetail',
  Refund: 'Refund'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
